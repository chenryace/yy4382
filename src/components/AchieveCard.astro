---
interface Props {
  keyword?: string;
  tags?: string[];
  categories?: string[];
}
const { keyword, tags /*, categories*/ } = Astro.props;

import { getCollection, type CollectionEntry } from "astro:content";
import Card from "./base/Card.astro";

let posts = (await getCollection("post")).sort(
  (a, b) => Number(b.data.date) - Number(a.data.date)
);

if (Array.isArray(tags) && tags.length > 0) {
  posts = posts.filter(
    (post) =>
      Array.isArray(post.data.tags) &&
      post.data.tags.some((tag) => tags.includes(tag))
  );
}

// if (Array.isArray(categories) && categories.length > 0) {
//     posts = posts.filter(post =>
//         (post.data.category && categories.includes(post.data.category)) ||
//         (!post.data.category && categories.includes(UNCATEGORIZED))
//     );
// }

const groups = (function () {
  const groupedPosts = posts.reduce(
    (grouped: any, post: CollectionEntry<"post">) => {
      const year = post.data.date.getFullYear();
      if (!grouped[year]) {
        grouped[year] = [];
      }
      grouped[year].push(post);
      return grouped;
    },
    {}
  );

  // convert the object to an array
  const groupedPostsArray = Object.keys(groupedPosts).map((key) => ({
    year: key,
    posts: groupedPosts[key],
  }));

  // sort years by latest first
  groupedPostsArray.sort((a, b) => parseInt(b.year) - parseInt(a.year));
  return groupedPostsArray;
})();

function formatDate(date: Date) {
  const month = (date.getMonth() + 1).toString().padStart(2, "0");
  const day = date.getDate().toString().padStart(2, "0");
  return `${month}-${day}`;
}

function formatTag(tag: string[]) {
  return tag.map((t) => `#${t}`).join(" ");
}
---

<Card class="px-4 py-2 lg:p-8 lg:py-5">
  {keyword ? <h1 class="card-heading mb-4">{keyword}</h1> : null}
  {
    groups.map((group) => (
      <div>
        {/* headers */}
        <div class="flex flex-row w-full items-center h-[3.75rem]">
          {/* year */}
          <div class="w-[15%] md:w-[10%] transition text-2xl font-bold text-right text-black/75 dark:text-white/75">
            {group.year}
          </div>
          {/* dot and line */}
          <div class="w-[15%] md:w-[10%]">
            <div class="h-3 w-3 bg-none rounded-full mx-auto z-50 outline outline-portage-300 outline-offset-[2px]" />
          </div>
          {/* post count */}
          <div class="w-[70%] md:w-[80%] transition text-left text-black/50 dark:text-white/50">
            {group.posts.length}
          </div>
        </div>
        {group.posts.map((post: CollectionEntry<"post">) => (
          <a
            href={"/post/" + post.slug}
            aria-label={post.data.title}
            class="group"
          >
            <div class="btn-plain w-full h-10 rounded-lg">
              <div class="flex flex-row justify-start items-center h-full">
                {/* date */}
                <div class="w-[15%] md:w-[10%] transition text-sm text-right text-black/50 dark:text-white/50">
                  {formatDate(post.data.date)}
                </div>
                {/* dot and line */}
                <div class="w-[15%] md:w-[10%] relative dash-line h-full flex items-center">
                  <div
                    class="transition-all mx-auto w-1 h-1 rounded 
                  group-hover:h-5 
                  z-50
                  bg-white dark:bg-gray-900 group-hover:bg-portage-300
                  outline outline-portage-300 group-hover:outline-transparent
                  "
                  />
                </div>
                {/* post title */}
                <div
                  class="w-[70%] md:max-w-[65%] md:w-[65%] font-[450] group-hover:translate-x-1 transition-all pr-8 whitespace-nowrap overflow-hidden
                  text-left text-gray-800 dark:text-gray-200 text-ellipsis group-hover:text-portage-700 dark:group-hover:text-portage-300"
                >
                  {post.data.title}
                </div>
                {/* tag list */}
                <div class="hidden md:block md:w-[15%] text-left text-sm transition whitespace-nowrap text-ellipsis overflow-hidden text-black/30 dark:text-white/30">
                  {formatTag(post.data.tags)}
                </div>
              </div>
            </div>
          </a>
        ))}
      </div>
    ))
  }
</Card>

<style>
  .dash-line {
  }
  .dash-line::before {
    content: "";
    @apply w-[10%] h-full absolute -top-1/2 left-[calc(50%_-_1px)] border-l-[2px]
    border-dashed pointer-events-none border-black/10 dark:border-white/30 transition;
  }
</style>
